// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using OnlineMarket.DataAccess;
using System;

namespace OnlineMarket.Web.Migrations
{
    [DbContext(typeof(OnlineMarketContext))]
    [Migration("20180518091852_UpdateExchangeRatesTables")]
    partial class UpdateExchangeRatesTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.AccountDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("money");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.CurrentRateDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("money");

                    b.Property<Guid>("ItemTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId")
                        .IsUnique();

                    b.ToTable("CurrentRate");
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.ExchangeRatesDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("money");

                    b.Property<Guid>("ItemTypeId");

                    b.Property<DateTime>("СhangeDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.ItemTypeDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ItemType");
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.OperationArchiveDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<Guid>("ItemTypeId");

                    b.Property<decimal>("OperationAmount");

                    b.Property<DateTime>("OperationDate");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("OperationArchive");
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.StorageDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<Guid>("ItemTypeId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("StorageAmount")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.UserDataModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.AccountDataModel", b =>
                {
                    b.HasOne("OnlineMarket.DataAccess.Entities.UserDataModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.CurrentRateDataModel", b =>
                {
                    b.HasOne("OnlineMarket.DataAccess.Entities.ItemTypeDataModel", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.ExchangeRatesDataModel", b =>
                {
                    b.HasOne("OnlineMarket.DataAccess.Entities.ItemTypeDataModel", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.OperationArchiveDataModel", b =>
                {
                    b.HasOne("OnlineMarket.DataAccess.Entities.AccountDataModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarket.DataAccess.Entities.ItemTypeDataModel", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineMarket.DataAccess.Entities.StorageDataModel", b =>
                {
                    b.HasOne("OnlineMarket.DataAccess.Entities.AccountDataModel", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineMarket.DataAccess.Entities.ItemTypeDataModel", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
